---
# This playbook installs OLCNE (single master)
# Configure Proxy for environment
-
  name: Apply proxy configuration to all hosts
  hosts: all
  tasks:
    -
      name: Configure Proxy for YUM
      lineinfile:
        path: /etc/yum.conf
        line: "proxy={{ proxy_host }}"
      when: use_proxy == True
    -
      name: Configure Proxy for environment
      blockinfile:
        path: /etc/profile.d/sh.local
        block: |
          export all_proxy="{{ proxy_host }}"
          export http_proxy="{{ proxy_host }}"
          export https_proxy="{{ proxy_host }}"
          export no_proxy="{{ no_proxy }}"
        create: yes
      when: use_proxy == True
-
  name: Apply proxy configuration to all kubernetes hosts
  hosts: kubernetes
  tasks:
    -
      name: Create directory for CRIO Proxy configuration
      file:
        path: /etc/systemd/system/crio.service.d
        state: directory
        mode: '0755'
      when: use_proxy == True
    -
      name: Configure Proxy for CRIO
      blockinfile:
        path: /etc/systemd/system/crio.service.d/proxy.conf
        block: |
          [Service]
          Environment="HTTP_PROXY={{ proxy_host }}"
          Environment="HTTPS_PROXY={{ proxy_host }}"
          Environment="NO_PROXY={{ no_proxy }}"
        create: yes
      when: use_proxy == True
# Configure general environment
-
  name: Apply environment settings for all
  hosts: all
  tasks:
#    -
#      name: Update all hosts
#      yum:
#        name: '*'
#        state: latest
    -
      name: Disable SELinux
      selinux:
        state: disabled
    -
      name: Install chrony
      yum:
        name: chrony
        state: present
    -
      name: Start chrony Service
      service:
        name: chronyd
        state: started
        enabled: yes
-
  name: Apply environment settings for Kubernetes nodes
  hosts: kubernetes
  tasks:
    -
      name: Disable swap
      command:
        cmd: /usr/sbin/swapoff -a
    -
      name: Comment swap entry from /etc/fstab
      replace:
        path: /etc/fstab
        regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
        replace: '#\1\2\3swap\4'
    -
      name: Load the br_netfilter module
      modprobe:
        name: br_netfilter
        state: present
    -
      name: Add the br_netfilter module as permanent
      lineinfile:
        path: /etc/modules-load.d/br_netfilter.conf
        line: "br_netfilter"
        create: yes
    -
      name: Add bridge-nf-call-ip6tables
      sysctl:
        name: net.bridge.bridge-nf-call-ip6tables
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
    -
      name: Add net.bridge.bridge-nf-call-iptables
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
    -
      name: Add net.ipv4.ip_forward
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
# Configure firewall
-
  name: Apply firewall rules for API-Server
  hosts: api-server
  tasks:
    -
      firewalld:
        port: 8091/tcp
        permanent: True
        state: enabled
-
  name: Apply firewall rules for Master(s)
  hosts: master
  tasks:
    -
      firewalld:
        port: '{{ item }}'
        permanent: True
        state: enabled
      loop:
        - 8090/tcp
        - 10250/tcp
        - 10255/tcp
        - 8472/udp
        - 6443/tcp
        - 10251/tcp
        - 10252/tcp
        - 2379/tcp
        - 2380/tcp
-
  name: Apply firewall rules for Workers
  hosts: workers
  tasks:
    -
      firewalld:
        port: '{{ item }}'
        permanent: True
        state: enabled
      loop:
        - 8090/tcp
        - 10250/tcp
        - 10255/tcp
        - 8472/udp
-
  name: Reload firewall rules
  hosts: all
  tasks:
    -
      name: Reloading firewalld
      command:
        cmd: firewall-cmd --reload
# Configure YUM repositories and installing packages
-
  name: Configure YUM repositories
  hosts: all
  tasks:
    -
      name: Installing OLCNE
      yum:
        name: oracle-olcne-release-el7
        state: present
    -
      name: Enabling repositories
      command:
        cmd: yum-config-manager --enable ol7_olcne ol7_kvm_utils ol7_addons ol7_latest ol7_UEKR5
-
  name: Configure API-Server
  hosts: api-server
  tasks:
    -
      name: Installing Platform CLI, Platform API Server, and utilities
      yum:
        name:
          - olcnectl
          - olcne-api-server
          - olcne-utils
        state: present
    -
      name: Enabling OLCNE API-Server
      service:
        name: olcne-api-server
        enabled: yes
-
  name: Configure Kubernetes Nodes
  hosts: kubernetes
  tasks:
    -
      name: Installing Platform API Agent, and utilities
      yum:
        name:
          - olcne-agent
          - olcne-utils
        state: present
    -
      name: Enabling OLCNE Agent
      service:
        name: olcne-agent
        enabled: yes
    -
      name: Installing Kubernetes packages
      yum:
        name:
          - kubeadm
          - kubelet
          - kubectl
        state: present
    -
      name: Enabling Kubelet service
      service:
        name: kubelet
        enabled: yes
    -
      name: Enabling CRIO service
      service:
        name: crio
        state: started
        enabled: yes
# Configure OLCNE
-
  name: Configure OLCNE, certificates and start services on API-Server
  hosts: api-server
  tasks:
    -
      name: Generating a certificates
      command:
        chdir: /etc/olcne
        cmd: ./gen-certs-helper.sh --cert-request-organization-unit "{{ org_unit }}" --cert-request-organization "{{ org }}" --cert-request-locality "{{ locality }}" --cert-request-state "{{ state }}" --cert-request-country {{ country }} --cert-request-common-name {{ common_name }} --nodes {{ all_nodes }}
    -
      name: Set correct user to send certificates
      replace:
        path: /etc/olcne/configs/certificates/olcne-tranfer-certs.sh
        regexp: '(\s+)USER=opc(\s+.*)?$'
        replace: '\1USER=root\2'
    -
      name: Copy certificates to Kubernetes nodes
      command:
        chdir: /etc/olcne
        cmd: bash -ex /etc/olcne/configs/certificates/olcne-tranfer-certs.sh
    -
      name: Start API-Server
      command:
        cmd: /etc/olcne/bootstrap-olcne.sh --secret-manager-type file --olcne-node-cert-path /etc/olcne/configs/certificates/production/node.cert --olcne-ca-path /etc/olcne/configs/certificates/production/ca.cert --olcne-node-key-path /etc/olcne/configs/certificates/production/node.key --olcne-component api-server
    -
      name: Configure OLCNE environment
      blockinfile:
        path: /etc/profile.d/sh.local
        block: |
          export OLCNE_SM_CA_PATH=/etc/olcne/configs/certificates/production/ca.cert
          export OLCNE_SM_CERT_PATH=/etc/olcne/configs/certificates/production/node.cert
          export OLCNE_SM_KEY_PATH=/etc/olcne/configs/certificates/production/node.key
-
  name: Configure and start OLCNE agent on Kubernetes nodes
  hosts: kubernetes
  tasks:
    -
      name: Start API agent
      command:
        cmd: /etc/olcne/bootstrap-olcne.sh --secret-manager-type file --olcne-node-cert-path /etc/olcne/configs/certificates/production/node.cert --olcne-ca-path /etc/olcne/configs/certificates/production/ca.cert --olcne-node-key-path /etc/olcne/configs/certificates/production/node.key --olcne-component agent
...
